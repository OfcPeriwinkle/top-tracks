import argparse
import logging

from typing import List, Dict

import dotenv
import spotipy
import tqdm

from rymscraper import rymscraper, RymUrl
from spotipy.oauth2 import SpotifyOAuth

logging.basicConfig(level=logging.INFO)


def get_args():
    parser = argparse.ArgumentParser(
        description='Create a Spotify playlist based on the top tracks of a given year')
    parser.add_argument('year', type=int, help='The year to get the top tracks from')
    parser.add_argument('--pages', type=int, default=1, help='The number of pages to scrape')
    parser.add_argument(
        '--genres',
        nargs='+',
        default=None,
        help='The genres to filter the top tracks by; separate multiple genres with spaces; '
        'if a genre has a space use a hyphen (e.g. New Wave -> new-wave)')
    return parser.parse_args()


def get_top_tracks(year: int, genres: List[str] = None, pages: int = 1) -> List[Dict]:
    url = RymUrl.RymUrl(year=year, kind="single", language='en',
                        genres=','.join(genres) if genres else None)
    network = rymscraper.RymNetwork()

    try:
        logging.info(f'Getting top tracks from {url}')
        list_rows = network.get_chart_infos(url, max_page=pages)
    except Exception as e:
        logging.error(f'Error getting top tracks: {e}')
    finally:
        network.browser.quit()

    return list_rows


def main():
    args = get_args()
    scope = "user-library-read,playlist-modify-private"
    sp = spotipy.Spotify(auth_manager=SpotifyOAuth(scope=scope))

    logging.info(f'Getting top tracks for {args.year} from RYM...')
    top_tracks = get_top_tracks(args.year, args.genres, args.pages)

    if not top_tracks:
        logging.error('No tracks found')
        return

    spotify_uris = set()

    for track in tqdm.tqdm(top_tracks, desc='Searching for top tracks on Spotify'):
        songs = track['Album'].split(' / ')

        for song in songs:
            res = sp.search(q=f'artist:{track["Artist"]} track:{song}', type='track')

            try:
                spotify_uris.add(res['tracks']['items'][0]['uri'])
            except IndexError:
                pass

    display_genres = [genre.replace("-", " ").title()
                      for genre in args.genres] if args.genres else []
    genre_description = f'{", ".join(display_genres)}' if args.genres else ''

    user = sp.current_user()
    res = sp.user_playlist_create(
        user=user['id'],
        name=f'Top {display_genres[0]} Tracks of {args.year}',
        public=False,
        description=f'The top {genre_description} singles of {args.year} according to Rate Your Music; generated by https://github.com/OfcPeriwinkle/top-tracks')

    spotify_uris = list(spotify_uris)
    chunked_uris = [spotify_uris[i:i + 100] for i in range(0, len(spotify_uris), 100)]

    for chunk in tqdm.tqdm(chunked_uris, desc='Adding track chunks to playlist'):
        sp.user_playlist_add_tracks(
            user=user['id'],
            playlist_id=res['id'],
            tracks=chunk)

    logging.info(f'Playlist created: {res["external_urls"]["spotify"]}')


if __name__ == '__main__':
    dotenv.load_dotenv()
    main()
